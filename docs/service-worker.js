!function(){"use strict";const e=["client/dayjs_custom_locale_fr.7407aec0.js","client/MainTitle.2d5fe3d0.js","client/a-propos.6270dd48.js","client/english.b5ced66b.js","client/cgu.ab4b6727.js","client/index.e231473a.js","client/[slug].e0f0d751.js","client/client.9abf4bbe.js","client/PictoAge.af35911e.js"].concat(["service-worker-index.htm","english.jpg","favicon.png","fonts/source-sans-pro-v14-latin-ext_latin_greek_cyrillic-300.woff","fonts/source-sans-pro-v14-latin-ext_latin_greek_cyrillic-300.woff2","fonts/source-sans-pro-v14-latin-ext_latin_greek_cyrillic-300italic.woff","fonts/source-sans-pro-v14-latin-ext_latin_greek_cyrillic-300italic.woff2","fonts/source-sans-pro-v14-latin-ext_latin_greek_cyrillic-600.woff","fonts/source-sans-pro-v14-latin-ext_latin_greek_cyrillic-600.woff2","fonts/source-sans-pro-v14-latin-ext_latin_greek_cyrillic-700.woff","fonts/source-sans-pro-v14-latin-ext_latin_greek_cyrillic-700.woff2","fonts/source-sans-pro-v14-latin-ext_latin_greek_cyrillic-italic.woff","fonts/source-sans-pro-v14-latin-ext_latin_greek_cyrillic-italic.woff2","fonts/source-sans-pro-v14-latin-ext_latin_greek_cyrillic-regular.woff","fonts/source-sans-pro-v14-latin-ext_latin_greek_cyrillic-regular.woff2","fonts/source-serif-pro-v10-latin-300.woff","fonts/source-serif-pro-v10-latin-300.woff2","fonts/source-serif-pro-v10-latin-300italic.woff","fonts/source-serif-pro-v10-latin-300italic.woff2","global.css","logo-192.png","logo-512.png","logo-918x480.jpg","manifest.json"]),t=new Set(e);self.addEventListener("install",t=>{t.waitUntil(caches.open("cache1619717203495").then(t=>t.addAll(e)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(async e=>{for(const t of e)"cache1619717203495"!==t&&await caches.delete(t);self.clients.claim()}))}),self.addEventListener("fetch",e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const s=new URL(e.request.url);s.protocol.startsWith("http")&&(s.hostname===self.location.hostname&&s.port!==self.location.port||(s.host===self.location.host&&t.has(s.pathname)?e.respondWith(caches.match(e.request)):"only-if-cached"!==e.request.cache&&e.respondWith(caches.open("offline1619717203495").then(async t=>{try{const s=await fetch(e.request);return t.put(e.request,s.clone()),s}catch(s){const n=await t.match(e.request);if(n)return n;throw s}}))))})}();
